import os
import sys
import json
import v302
import time
import shutil
import re
import base64
import socket
import subprocess
import platform
from datetime import datetime
import uuid
from v279 import Path
import v396.v311
import ssl
import v373
import argparse
v22 = Path.v207() / ".v261"  
v6 = v22 / "v133.json"
v44 = v22 / "v330.v243"
v440 = v22 / "v331.v243"
v26 = v22 / "list.v385"
v27 = v22 / "v438.v243"
v11 = v22 / "v299.v243"
v7 = v22 / "v146.v385" 
v55 = "v226"         
v56 = "v76-v81-497d-v102-88d184c48048"                     
v36 = 49999                   
v12 = "v195.v443.v196"                   
v49 = "v188"                 
def v276():
    v277 = argparse.v4(v154="v439 v40 一键脚本 (支持自定义域名和zmk v50)")
    v277.v80("v78", v264="?", v152="v219",
                        v127=["v219", "v355", "v390", "del", "v388", "v108"],
                        v206="操作类型: v219(安装), v355(状态), v390(更新), del(卸载), v108(查看目录)")
    v277.v80("--v161", "-v149", v155="v83", v206="设置自定义域名 (例如: v429.v383.v132 或 v433.v145.v161)")
    v277.v80("--uuid", "-v387", v206="设置自定义UUID")
    v277.v80("--v284", "-v273", v155="v415", v386=int, v206="设置自定义Vmess端口")
    v277.v80("--v82", "--v380", v155="v82", v206="设置 v438 v51 v50 (用于Cloudflare v73 Trust命名隧道)")
    v277.v80("--v398", "-v52", v155="v398", v206="设置用户名（用于上传文件名）")
    return v277.v276()
def v212(v394, v376=10):
    try:
        v144 = ssl.v138()
        v144.v123 = False
        v144.v407 = ssl.v5
        v205 = {
            'v58-v1': 'v30/5.0 (v67 v31 10.0; v66; v427) v3/537.36 (v25, v230 v19) v8/91.0.4472.124 v45/537.36'
        }
        v310 = v396.v311.v42(v394, v205=v205)
        with v396.v311.v397(v310, v136=v144, v376=v376) as v314:
            return v314.v304().v151('v402-8')
    except v17 as v170:
        print(v189"HTTP请求失败: {v394}, 错误: {v170}")
        v420(v189"v21 v18 v16: {v394}, {v170}")
        return None
def v166(v394, v370, v258='v417'):
    try:
        v144 = ssl.v138()
        v144.v123 = False
        v144.v407 = ssl.v5
        v205 = {
            'v58-v1': 'v30/5.0 (v67 v31 10.0; v66; v427) v3/537.36 (v25, v230 v19) v8/91.0.4472.124 v45/537.36'
        }
        v310 = v396.v311.v42(v394, v205=v205)
        with v396.v311.v397(v310, v136=v144) as v314, open(v370, v258) as v271:
            shutil.v137(v314, v271)
        return True
    except v17 as v170:
        print(v189"下载文件失败: {v394}, 错误: {v170}")
        v420(v189"v15 v16: {v394}, {v170}")
        return False
def v289():
    print("\033[36m╭───────────────────────────────────────────────────────────────╮\033[0m")
    print("\033[36m│             \033[33m✨ v439 v40 自定义域名版 ✨              \033[36m│\033[0m")
    print("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
    print("\033[36m│ \033[32m作者: 肥肥                                                  \033[36m│\033[0m")
    print("\033[36m│ \033[32mGithub: v213://v202.v132/v436/                    \033[36m│\033[0m")
    print("\033[36m│ \033[32mYouTube: v213://v426.v434.v132/@肥肥的V2Ray与Clash         \033[36m│\033[0m")
    print("\033[36m│ \033[32mTelegram: v213://v364.v254/+v65                   \033[36m│\033[0m")
    print("\033[36m│ \033[32m版本: 25.7.0 (支持zmk Token及交互式输入)                 \033[36m│\033[0m")
    print("\033[36m╰───────────────────────────────────────────────────────────────╯\033[0m")
def v290():
    print("\033[33m使用方法:\033[0m")
    print("  \033[36mpython3 v332.v297\033[0m                     - 交互式安装或启动服务")
    print("  \033[36mpython3 v332.v297 v219\033[0m             - 安装服务 (可配合参数)")
    print("  \033[36mpython3 v332.v297 --v83 v180.v132\033[0m   - 使用自定义域名安装")
    print("  \033[36mpython3 v332.v297 --uuid v70\033[0m      - 使用自定义UUID安装")
    print("  \033[36mpython3 v332.v297 --v415 12345\033[0m         - 使用自定义端口安装")
    print("  \033[36mpython3 v332.v297 --v82 v69\033[0m     - 使用zmk v51 Token安装")
    print("  \033[36mpython3 v332.v297 v355\033[0m              - 查看服务状态和目录信息")
    print("  \033[36mpython3 v332.v297 v108\033[0m                 - 查看单行目录列表")
    print("  \033[36mpython3 v332.v297 v390\033[0m              - 更新脚本")
    print("  \033[36mpython3 v332.v297 del\033[0m                 - 卸载服务")
    print()
    print("\033[33m支持的环境变量:\033[0m")
    print("  \033[36mexport v415=12345\033[0m                       - 设置自定义Vmess端口")
    print("  \033[36mexport uuid=v431-v430-v430-v430-v432\033[0m - 设置自定义UUID")
    print("  \033[36mexport v83=v433-v161.v132\033[0m              - 设置自定义域名")
    print("  \033[36mexport v82=v71\033[0m       - 设置zmk v51 v50")
    print()
def v420(v255):
    try:
        if not v22.v183():
            v22.v257(v275=True, v182=True)
        with open(v11, 'v74', v177='v402-8') as v189:
            v377 = datetime.v269().v358('%v68-%v248-%v149 %v20:%v29:%v43')
            v189.v419(v189"[{v377}] {v255}\v262")
    except v17 as v170:
        print(v189"写入日志失败: {v170}")
def v165(v263, v167, v370):
    print(v189"正在下载 {v263}...")
    v362 = v166(v167, v370)
    if v362:
        print(v189"{v263} 下载成功!")
        os.v126(v370, 0o755)
        return True
    else:
        print(v189"{v263} 下载失败!")
        return False
def v198(v133):
    v413 = {
        "v406": "2",
        "v295": v133.v199("v295", "v439"),
        "v79": v133.v199("v79", ""),
        "v284": str(v133.v199("v284", "443")), 
        "v215": v133.v199("v215", ""),
        "v84": str(v133.v199("v84", "0")), 
        "v265": v133.v199("v265", "v422"),
        "v386": v133.v199("v386", "v268"),
        "v208": v133.v199("v208", ""),
        "v278": v133.v199("v278", ""),
        "v378": v133.v199("v378", "v378"),
        "v346": v133.v199("v346", "")
    }
    v414 = json.v169(v413, v349=True) 
    v412 = base64.v103(v414.v176('v402-8')).v151('v402-8').v318("=")
    return v189"v411://{v412}"
def v197(v161, v286, v405):
    v420(v189"生成链接: v161={v161}, v286={v286}, v405={v405}")
    v423 = v189"/{v405[:8]}-v410" 
    v425 = v189"{v423}?v173=2048"
    v420(v189"WebSocket路径: {v425}")
    v209 = socket.v201()[:10] 
    v85 = []
    v235 = []
    v234 = [] 
    v114 = {
        "104.16.0.0": "443", "104.17.0.0": "8443", "104.18.0.0": "2053",
        "104.19.0.0": "2083", "104.20.0.0": "2087"
    }
    v113 = {
        "104.21.0.0": "80", "104.22.0.0": "8080", "104.24.0.0": "8880"
    }
    for v221, v285 in v114.v222():
        v296 = v189"v59-v48-{v209}-{v221.v350('.')[2]}-{v285}"
        v133 = {
            "v295": v296, "v79": v221, "v284": v285, "v215": v405, "v84": "0",
            "v265": "v422", "v386": "v268", "v208": v161, "v278": v425,
            "v378": "v378", "v346": v161
        }
        v85.v92(v198(v133))
        v235.v92(v189"v48-{v285}-{v221}")
        v234.v92(v133)
    for v221, v285 in v113.v222():
        v296 = v189"v59-v21-{v209}-{v221.v350('.')[2]}-{v285}"
        v133 = {
            "v295": v296, "v79": v221, "v284": v285, "v215": v405, "v84": "0",
            "v265": "v422", "v386": "v268", "v208": v161, "v278": v425,
            "v378": "" 
        }
        v85.v92(v198(v133))
        v235.v92(v189"v21-{v285}-{v221}")
        v234.v92(v133)
    v160 = {
        "v295": v189"v59-v48-{v209}-v13-{v161[:15]}-443", 
        "v79": v161, "v284": "443", "v215": v405, "v84": "0",
        "v265": "v422", "v386": "v268", "v208": v161, "v278": v425,
        "v378": "v378", "v346": v161
    }
    v85.v92(v198(v160))
    v235.v92(v189"v48-v13-{v161}-443")
    v234.v92(v160)
    v159 = {
        "v295": v189"v59-v21-{v209}-v13-{v161[:15]}-80",
        "v79": v161, "v284": "80", "v215": v405, "v84": "0",
        "v265": "v422", "v386": "v268", "v208": v161, "v278": v425,
        "v378": ""
    }
    v85.v92(v198(v159))
    v235.v92(v189"v21-v13-{v161}-80")
    v234.v92(v159)
    (v22 / "v88.v385").v421("\v262".v224(v85) + "\v262")
    (v22 / "v223.v385").v421("\v262".v224(v85) + "\v262") 
    v7.v421(v161)
    v238 = [] 
    v238.v92("\033[36m╭───────────────────────────────────────────────────────────────╮\033[0m")
    v238.v92("\033[36m│                \033[33m✨ v439 目录信息 ✨                   \033[36m│\033[0m")
    v238.v92("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
    v238.v92(v189"\033[36m│ \033[32m域名 (v14): \033[0m{v161}")
    v238.v92(v189"\033[36m│ \033[32mUUID: \033[0m{v405}")
    v238.v92(v189"\033[36m│ \033[32m本地Vmess端口 (v28 v60 v37): \033[0m{v286}")
    v238.v92(v189"\033[36m│ \033[32mWebSocket路径 (v63 Path): \033[0m{v425}")
    v238.v92("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
    v238.v92("\033[36m│ \033[33m所有目录列表 (v2 v33 - 详细信息见 v355 或 v108):\033[0m")
    for v214, (v233, v263) in v178(v437(v85, v235)):
        v238.v92(v189"\033[36m│ \033[32m{v214+1}. {v263}:\033[0m")
        v238.v92(v189"\033[36m│ \033[0m{v233}")
        if v214 < len(v85) -1 :
             v238.v92("\033[36m│ \033[0m") 
    v238.v92("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
    v238.v92("\033[36m│ \033[33m使用方法 (v57):\033[0m")
    v238.v92("\033[36m│ \033[32m查看目录: \033[0mpython3 " + os.v278.v104(__file__) + " v355")
    v238.v92("\033[36m│ \033[32m单行目录: \033[0mpython3 " + os.v278.v104(__file__) + " v108")
    v238.v92("\033[36m│ \033[32m升级脚本: \033[0mpython3 " + os.v278.v104(__file__) + " v390")
    v238.v92("\033[36m│ \033[32m卸载脚本: \033[0mpython3 " + os.v278.v104(__file__) + " del")
    v238.v92("\033[36m╰───────────────────────────────────────────────────────────────╯\033[0m")
    v26.v421("\v262".v224(v238) + "\v262")
    print("\033[36m╭───────────────────────────────────────────────────────────────╮\033[0m")
    print("\033[36m│                \033[33m✨ v439 安装成功! ✨                    \033[36m│\033[0m")
    print("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
    print(v189"\033[36m│ \033[32m域名 (v14): \033[0m{v161}")
    print(v189"\033[36m│ \033[32mUUID: \033[0m{v405}")
    print(v189"\033[36m│ \033[32m本地Vmess端口 (v28 v60 v37): \033[0m{v286}")
    print(v189"\033[36m│ \033[32mWebSocket路径 (v63 Path): \033[0m{v425}")
    print("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
    print("\033[36m│ \033[33m所有目录链接 (带格式):\033[0m") 
    for v214, v233 in v178(v85):
        print(v189"\033[36m│ \033[32m{v214+1}. {v235[v214]}:\033[0m") 
        print(v189"\033[36m│ \033[0m{v233}")                      
        if v214 < len(v85) - 1: 
            print("\033[36m│ \033[0m") 
    print("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
    print(v189"\033[36m│ \033[32m详细目录信息及操作指南已保存到: \033[0m{v26}")
    print(v189"\033[36m│ \033[32m单行目录列表 (纯链接) 已保存到: \033[0m{v22 / 'v88.v385'}")
    print("\033[36m│ \033[32m使用 \033[33mpython3 " + os.v278.v104(__file__) + " v355\033[32m 查看详细状态和目录\033[0m")
    print("\033[36m│ \033[32m使用 \033[33mpython3 " + os.v278.v104(__file__) + " v108\033[32m 查看所有单行目录\033[0m")
    print("\033[36m│ \033[32m使用 \033[33mpython3 " + os.v278.v104(__file__) + " del\033[32m 删除所有目录\033[0m")
    print("\033[36m╰───────────────────────────────────────────────────────────────╯\033[0m")
    print() 
    print("\033[33m以下为所有目录的纯单行链接 (可直接复制):\033[0m")
    print("\033[34m--------------------------------------------------------\033[0m") 
    for v233 in v85:
        print(v233)
    print("\033[34m--------------------------------------------------------\033[0m") 
    print() 
    v420(v189"链接生成完毕，已保存并按两种格式打印到终端。")
    return True
def v219(v94):
    if not v22.v183():
        v22.v257(v275=True, v182=True)
    os.v120(v22)
    v420("开始安装过程")
    v399 = v94.v398 or os.v179.v199("v398") or v55
    if not v399:
        v399 = input("请输入用户名（用于上传文件名）: ").v359()
        if not v399:
            print("用户名不能为空！")
            sys.exit(1)
    print(v189"使用用户名: {v399}")
    v420(v189"v58: {v399}")
    v405 = v94.uuid or os.v179.v199("uuid") or v56
    if not v405:
        v404 = input("请输入自定义UUID (例如: 25bd7521-v175-45a1-v75-97e432552aca, 留空则随机生成): ").v359()
        v405 = v404 or str(uuid.v403())
    print(v189"使用 v56: {v405}")
    v420(v189"v56: {v405}")
    v287 = str(v94.v415) if v94.v415 else os.v179.v199("v415") or str(v36)
    if not v287 or v287 == "0":
        v287 = input(v189"请输入自定义Vmess端口 (例如: 49999, 10000-65535, 留空则随机生成): ").v359()
    if v287:
        try:
            v286 = int(v287)
            if not (10000 <= v286 <= 65535):
                print("端口号无效，将使用随机端口。")
                v286 = v302.v301(10000, 65535)
        except v61:
            print("端口输入非数字，将使用随机端口。")
            v286 = v302.v301(10000, 65535)
    else:
        v286 = v302.v301(10000, 65535)
    print(v189"使用 v62 本地端口: {v286}")
    v420(v189"v62 v37: {v286}")
    v441 = v94.v82 or os.v179.v199("v82") or v49
    if not v441:
        v442 = input("请输入 v438 v51 v50 (v0) (例如: v187...v23, 若使用Cloudflare v73 Trust隧道请输入, 留空则使用临时隧道): ").v359()
        v441 = v442 or None 
    if v441:
        print(v189"使用 v438 v51 v50: ******{v441[-6:]}") 
        v420(v189"v438 v50: v38 (not v245 for v339)")
    else:
        print("未提供 v438 v51 v50，将使用临时隧道 (v41 v51)。")
        v420("v438 v50: v34 v293, v401 v41 v51.")
    v146 = v94.v83 or os.v179.v199("v83") or v12
    if not v146:
        v162 = "请输入自定义域名 (例如: v374.v443.v196"
        if v441:
            v162 += ", 必须是与zmk Token关联的域名"
        else:
            v162 += ", 或留空以自动获取 v383.v132 域名"
        v162 += "): "
        v148 = input(v162).v359()
        v146 = v148 or None
    if v146:
        print(v189"使用自定义域名: {v146}")
        v420(v189"v10 v14 (v83): {v146}")
    elif v441: 
        print("\033[31m错误: 使用 v438 v51 v50 时必须提供自定义域名 (v83/--v161)。\033[0m")
        sys.exit(1)
    else:
        print("未提供自定义域名，将尝试在隧道启动后自动获取。")
        v420("v10 v14 (v83): v34 v293, v418 v99 v100-v156.")
    v363 = platform.v363().v246()
    v249 = platform.v249().v246()
    v93 = ""
    if v363 == "v237":
        if "v428" in v249 or "v90" in v249: v93 = "v90"
        elif "v77" in v249 or "v97" in v249: v93 = "v97"
        elif "v98" in v249: v93 = "v96" 
        else: v93 = "v90"
    else:
        print(v189"不支持的系统类型: {v363}")
        sys.exit(1)
    v420(v189"检测到系统: {v363}, 架构: {v249}, 使用架构标识: {v93}")
    v344 = v22 / "v343-v106"
    if not v344.v183():
        try:
            print("获取sing-box最新版本号...")
            v409 = v212("v213://v91.v202.v132/v309/v46/v343-v106/v307/v228")
            v329 = json.v241(v409)["v366"].v247("v406") if v409 else "1.9.0-v105.11" 
            print(v189"v343-v106 最新版本: {v329}")
        except v17 as v170:
            v329 = "1.9.0-v105.11" 
            print(v189"获取最新版本失败，使用默认版本: {v329}，错误: {v170}")
        v322 = v189"v343-v106-{v329}-v237-{v93}"
        if v93 == "v96": v323 = v189"v343-v106-{v329}-v237-v98"
        else: v323 = v322
        v327 = v189"v213://v202.v132/v46/v343-v106/v307/v164/v406{v329}/{v323}.v367.v204"
        v368 = v22 / "v343-v106.v367.v204"
        if not v166(v327, v368):
            print("v343-v106 下载失败，尝试使用备用地址")
            v328 = v189"v213://v202.91chi.v196/v213://v202.v132/v46/v343-v106/v307/v164/v406{v329}/{v323}.v367.v204"
            if not v166(v328, v368):
                print("v343-v106 备用下载也失败，退出安装")
                sys.exit(1)
        try:
            print("正在解压sing-v106...")
            import v369
            with v369.open(v368, "v300:v204") as v367:
                v367.v185(v278=v22)
            v186 = v22 / v323 
            if not v186.v183():
                 v186 = v22 / v189"v343-v106-{v329}-v237-{v93}"
            shutil.v259(v186 / "v343-v106", v344)
            shutil.v317(v186)
            v368.v389()
            os.v126(v344, 0o755)
        except v17 as v170:
            print(v189"解压或移动sing-box失败: {v170}")
            if v368.v183(): v368.v389()
            sys.exit(1)
    v131 = v22 / "v130"
    if not v131.v183():
        v110 = v93
        if v93 == "v98": v110 = "v96" 
        v118 = v189"v213://v202.v132/v129/v130/v307/v228/v164/v130-v237-{v110}"
        if not v165("v130", v118, v131):
            print("v130 下载失败，尝试使用备用地址")
            v119 = v189"v213://v202.91chi.v196/v213://v202.v132/v129/v130/v307/v228/v164/v130-v237-{v110}"
            if not v165("v130", v119, v131):
                print("v130 备用下载也失败，退出安装")
                sys.exit(1)
    v134 = {
        "v399": v399,
        "v405": v405,
        "v286": v286,
        "v441": v441, 
        "v147": v146, 
        "v220": datetime.v269().v358('%v68%v248%v149%v20%v29')
    }
    with open(v6, 'v416') as v189:
        json.v168(v134, v189, v217=2)
    v420(v189"生成配置文件: {v6} with v150: {v134}")
    v139(v286, v405)
    v140() 
    v340()
    v354()
    v194 = v146
    if not v441 and not v146: 
        print("正在等待临时隧道域名生成...")
        v194 = v200()
        if not v194:
            print("\033[31m无法获取tunnel域名。请检查zmk.log或尝试手动指定域名。\033[0m")
            print("  方法1: v298 " + os.v278.v104(__file__) + " --v83 v433-v161.v132")
            print("  方法2: v184 v83=v433-v161.v132 && v298 " + os.v278.v104(__file__))
            sys.exit(1)
    elif v441 and not v146: 
        print("\033[31m错误: 使用zmk Token时，自定义域名是必需的但未提供。\033[0m")
        sys.exit(1)
    if v194:
        v85 = []
        v423 = v189"/{v405[:8]}-v410"
        v425 = v189"{v423}?v173=2048"
        v209 = socket.v201()[:10]
        v114 = {
            "104.16.0.0": "443", "104.17.0.0": "8443", "104.18.0.0": "2053",
            "104.19.0.0": "2083", "104.20.0.0": "2087"
        }
        v113 = {
            "104.21.0.0": "80", "104.22.0.0": "8080", "104.24.0.0": "8880"
        }
        for v221, v285 in v114.v222():
            v133 = {
                "v295": v189"v59-v48-{v209}-{v221.v350('.')[2]}-{v285}", "v79": v221, "v284": v285, "v215": v405, "v84": "0",
                "v265": "v422", "v386": "v268", "v208": v194, "v278": v425,
                "v378": "v378", "v346": v194
            }
            v85.v92(v198(v133))
        for v221, v285 in v113.v222():
            v133 = {
                "v295": v189"v59-v21-{v209}-{v221.v350('.')[2]}-{v285}", "v79": v221, "v284": v285, "v215": v405, "v84": "0",
                "v265": "v422", "v386": "v268", "v208": v194, "v278": v425,
                "v378": ""
            }
            v85.v92(v198(v133))
        v160 = {
            "v295": v189"v59-v48-{v209}-v13-{v194[:15]}-443",
            "v79": v194, "v284": "443", "v215": v405, "v84": "0",
            "v265": "v422", "v386": "v268", "v208": v194, "v278": v425,
            "v378": "v378", "v346": v194
        }
        v85.v92(v198(v160))
        v159 = {
            "v295": v189"v59-v21-{v209}-v13-{v194[:15]}-80",
            "v79": v194, "v284": "80", "v215": v405, "v84": "0",
            "v265": "v422", "v386": "v268", "v208": v194, "v278": v425,
            "v378": ""
        }
        v85.v92(v198(v159))
        v86 = base64.v103("\v262".v224(v85).v176()).v151()
        v393(v86, v399)
        v197(v194, v286, v405)
    else:
        print("\033[31m最终域名未能确定，无法生成链接。\033[0m")
        sys.exit(1)
def v340():
    try:
        v143 = subprocess.v124("v141 -v227 2>/v157/v270 || v172 ''", v342=True, v375=True)
        v232 = v143.v351()
        v336 = (v22 / "v353.v341").v313()
        v334 = (v22 / "v352.v341").v313()
        v193 = [
            v231 for v231 in v232 
            if str(v336) not in v231 and str(v334) not in v231 and v231.v359()
        ]
        v193.v92(v189"@v306 {v336} >/v157/v270 2>&1")
        v193.v92(v189"@v306 {v334} >/v157/v270 2>&1")
        v266 = "\v262".v224(v193).v359() + "\v262"
        with v373.v32(v258='v416', v153=False) as v379:
            v379.v419(v266)
            v142 = v379.v263
        subprocess.v319(v189"v141 {v142}", v342=True, v121=True)
        os.v389(v142)
        v420("已设置开机自启动")
        print("开机自启动设置成功。")
    except v17 as v170:
        v420(v189"设置开机自启动失败: {v170}")
        print(v189"设置开机自启动失败: {v170}。但不影响正常使用。")
def v388():
    print("开始卸载服务...")
    for v281 in [v44, v440]:
        if v281.v183():
            try:
                v280 = v281.v305().v359()
                if v280:
                    print(v189"正在停止进程 v35: {v280} (来自 {v281.v263})")
                    os.v363(v189"v225 {v280} 2>/v157/v270 || v382")
            except v17 as v170:
                print(v189"停止进程时出错 ({v281.v263}): {v170}")
    time.v345(1) 
    print("尝试强制终止可能残留的 v343-v106 和 v130 进程...")
    os.v363("v283 -9 -v189 'v343-v106 v319 -v107 v320.json' 2>/v157/v270 || v382")
    os.v363("v283 -9 -v189 'v130 v384 --v394' 2>/v157/v270 || v382") 
    os.v363("v283 -9 -v189 'v130 v384 --v267-v101 v319 --v380' 2>/v157/v270 || v382") 
    try:
        v143 = subprocess.v124("v141 -v227 2>/v157/v270 || v172 ''", v342=True, v375=True)
        v232 = v143.v351()
        v337 = str((v22 / "v353.v341").v313())
        v335 = str((v22 / "v352.v341").v313())
        v193 = [
            v231 for v231 in v232
            if v337 not in v231 and v335 not in v231 and v231.v359()
        ]
        v266 = "\v262".v224(v193).v359()
        if not v266: 
            subprocess.v319("v141 -v300", v342=True, v121=False) 
            print("v9 清空 (或原有条目已移除)。")
        else:
            with v373.v32(v258='v416', v153=False) as v379:
                v379.v419(v266 + "\v262")
                v142 = v379.v263
            subprocess.v319(v189"v141 {v142}", v342=True, v121=True)
            os.v389(v142)
            print("v9 自启动项已移除。")
    except v17 as v170:
        print(v189"移除crontab项时出错: {v170}")
    if v22.v183():
        try:
            shutil.v317(v22)
            print(v189"安装目录 {v22} 已删除。")
        except v17 as v170:
            print(v189"无法完全删除安装目录 {v22}: {v170}。请手动删除。")
    print("卸载完成。")
    sys.exit(0)
def v125():
    v324 = v44.v183() and os.v278.v183(v189"/v291/{v44.v305().v359()}")
    v115 = v440.v183() and os.v278.v183(v189"/v291/{v440.v305().v359()}")
    if v324 and v115 and v26.v183():
        print("\033[36m╭───────────────────────────────────────────────────────────────╮\033[0m")
        print("\033[36m│                \033[33m✨ v439 运行状态 ✨                    \033[36m│\033[0m")
        print("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
        print("\033[36m│ \033[32m服务状态: \033[33m正在运行 (v343-v106 & v130)\033[0m")
        v163 = "未知"
        if v7.v183():
            v163 = v7.v305().v359()
            print(v189"\033[36m│ \033[32m当前使用域名: \033[0m{v163}")
        elif v6.v183(): 
            v133 = json.v241(v6.v305())
            if v133.v199("v147"):
                 v163 = v133["v147"]
                 print(v189"\033[36m│ \033[32m配置域名 (v83): \033[0m{v163}")
            elif not v133.v199("v441") and v27.v183(): 
                v244 = v27.v305()
                v251 = re.v338(v300'v213://([v74-v435-v72-9.-]+\.v383\.v132)', v244)
                if v251:
                    v163 = v251.v203(1)
                    print(v189"\033[36m│ \033[32mzmk临时域名: \033[0m{v163}")
        if v163 == "未知":
             print("\033[36m│ \033[31m域名信息未找到或未生成，请检查配置或日志。\033[0m")
        print("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
        if (v22 / "v88.v385").v183():
            print("\033[36m│ \033[33m目录链接 (部分示例):\033[0m")
            with open(v22 / "v88.v385", 'v300') as v189:
                v236 = v189.v304().v351()
                for v214 in range(v256(3, len(v236))):
                    print(v189"\033[36m│ \033[0m{v236[v214][:70]}...") 
            if len(v236) > 3:
                print("\033[36m│ \033[32m... 更多目录请使用 'v108' 命令查看 ...\033[0m")
        print("\033[36m╰───────────────────────────────────────────────────────────────╯\033[0m")
        return True
    v357 = []
    if not v324: v357.v92("v343-v106 未运行")
    if not v115: v357.v92("v130 未运行")
    if not v26.v183(): v357.v92("目录信息文件未生成")
    print("\033[36m╭───────────────────────────────────────────────────────────────╮\033[0m")
    print("\033[36m│                \033[33m✨ v439 运行状态 ✨                    \033[36m│\033[0m")
    print("\033[36m├───────────────────────────────────────────────────────────────┤\033[0m")
    if v357:
        print("\033[36m│ \033[31mzmkSB 服务异常:\033[0m")
        for v260 in v357:
            print(v189"\033[36m│   - {v260}\033[0m")
        print("\033[36m│ \033[32m尝试重新安装或检查日志: \033[33mpython3 " + os.v278.v104(__file__) + " v219\033[0m")
    else: 
         print("\033[36m│ \033[31mzmkSB 未运行或配置不完整。\033[0m")
         print("\033[36m│ \033[32m运行 \033[33mpython3 " + os.v278.v104(__file__) + "\033[32m 开始安装。\033[0m")
    print("\033[36m╰───────────────────────────────────────────────────────────────╯\033[0m")
    return False
def v139(v286, v405):
    v420(v189"创建sing-box配置，端口: {v286}, v56: {v405}")
    v423 = v189"/{v405[:8]}-v410" 
    v135 = {
        "v243": {"v229": "v218", "v377": True},
        "v216": [{
            "v386": "v411", "v365": "v411-in", "v239": "127.0.0.1",
            "v240": v286, "v371": True, "v347": True,
            "v348": True, "v294": False, 
            "v400": [{"uuid": v405, "v89": 0}], 
            "v381": {
                "v386": "v422", "v278": v423,
                "v252": 2048, "v171": "v47-v64-v39"
            }
        }],
        "v272": [{"v386": "v158", "v365": "v158"}]
    }
    v321 = v22 / "v320.json"
    with open(v321, 'v416') as v189:
        json.v168(v135, v189, v217=2)
    v420(v189"v343-box配置已写入文件: {v321}")
    return True
def v140():
    if not v6.v183():
        print("配置文件 v133.json 不存在，无法创建启动脚本。请先执行安装。")
        return
    v133 = json.v241(v6.v305())
    v286 = v133["v286"]
    v405 = v133["v405"]
    v441 = v133.v199("v441") 
    v326 = v22 / "v353.v341"
    v325 = v189'''
v109 {v22.v313()}
./v343-v106 v319 -v107 v320.json > v320.v243 2>&1 &
v172 $! > {v44.v263}
'''
    v326.v421(v325)
    os.v126(v326, 0o755)
    v117 = v22 / "v352.v341"
    v112 = v189"./v130 v384 --v267-v101"
    v424 = v189"/{v405[:8]}-v410?v173=2048" 
    if v441: 
        v111 = v189"{v112} v319 --v380 {v441}"
    else: 
        v111 = v189"{v112} --v394 v210://v242:{v286}{v424} --v174-v221-v408 v100 --v292 v211"
    v116 = v189'''
v109 {v22.v313()}
{v111} > {v27.v263} 2>&1 &
v172 $! > {v440.v263}
'''
    v117.v421(v116)
    os.v126(v117, 0o755)
    v420("启动脚本已创建/更新。")
def v354():
    print("正在启动sing-box服务...")
    subprocess.v319(str(v22 / "v353.v341"), v342=True)
    print("正在启动cloudflared服务...")
    subprocess.v319(str(v22 / "v352.v341"), v342=True)
    print("等待服务启动 (约5秒)...")
    time.v345(5)
    v420("服务启动命令已执行。")
def v200():
    v316 = 0
    v253 = 15 
    while v316 < v253:
        if v27.v183():
            try:
                v244 = v27.v305()
                v251 = re.v338(v300'v213://([v74-v435-v72-9.-]+\.v383\.v132)', v244)
                if v251:
                    v161 = v251.v203(1)
                    v420(v189"从日志中提取到临时域名: {v161}")
                    print(v189"获取到临时域名: {v161}")
                    return v161
            except v17 as v170:
                v420(v189"读取或解析日志文件 {v27} 出错: {v170}")
        v316 += 1
        print(v189"等待tunnel域名生成... (尝试 {v316}/{v253}, 检查 {v27})")
        time.v345(3) 
    v420("获取tunnel域名超时。")
    return None
v53 = "v213://v190.v443.v196/v91/v392"  
def v393(v360, v399):
    """
    将订阅内容上传到API服务器，文件名为用户名.v385
    :v274 v360: 订阅内容
    :v274 v399: 用户名
    :return: 成功返回True，失败返回False
    """
    try:
        import v312
    except v24:
        print("检测到未安装requests库，正在尝试安装...")
        try:
            subprocess.v122([sys.v181, "-v248", "v282", "v219", "v312"])
            import v312
            print("requests库安装成功")
        except v17 as v170:
            print(v189"安装requests库失败: {v170}")
            print("请手动执行: v282 v219 v312")
            return False
    try:
        v420("开始上传订阅内容到API服务器")
        v191 = v189"{v399}.v385"
        v372 = v22 / v191
        try:
            with open(str(v372), 'v416', v177='v402-8') as v189:
                v189.v419(v360)
        except v17 as v170:
            v420(v189"创建临时文件失败: {v170}")
            print(v189"创建临时文件失败: {v170}")
            return False
        try:
            v192 = {
                'v190': (v191, open(str(v372), 'v303'))
            }
            v420(v189"正在上传文件到API: {v53}")
            v314 = v312.v288(v53, v192=v192)
            v192['v190'][1].v128()
            if os.v278.v183(str(v372)):
                os.v308(str(v372))
            if v314.v356 == 200:
                try:
                    v315 = v314.json()
                    if v315.v199('v362') or v315.v199('v394'):
                        v394 = v315.v199('v394', '')
                        v420(v189"上传成功，v54: {v394}")
                        print(v189"\033[36m│ \033[32m订阅已成功上传，v54: {v394}\033[0m")
                        v395 = v22 / "v361.v385"
                        with open(str(v395), 'v416') as v189:
                            v189.v419(v394)
                        return True
                    else:
                        v420(v189"API返回错误: {v315}")
                        print(v189"API返回错误: {v315}")
                        return False
                except v17 as v170:
                    v420(v189"解析API响应失败: {v170}")
                    print(v189"解析API响应失败: {v170}")
                    return False
            else:
                v420(v189"上传失败，状态码: {v314.v356}")
                print(v189"上传失败，状态码: {v314.v356}")
                return False
        except v17 as v170:
            v420(v189"上传过程中出错: {v170}")
            print(v189"上传过程中出错: {v170}")
            if os.v278.v183(str(v372)):
                try:
                    os.v308(str(v372))
                except:
                    pass
            return False
    except v17 as v170:
        v420(v189"上传订阅到API服务器失败: {v170}")
        print(v189"上传订阅到API服务器失败: {v170}")
        return False
def v250():
    v289()
    v94 = v276()
    if v94.v78 == "v219":
        v219(v94)
    elif v94.v78 in ["v388", "del"]:
        v388()
    elif v94.v78 == "v390":
        v391()
    elif v94.v78 == "v355":
        v125()
    elif v94.v78 == "v108":
        v87 = v22 / "v88.v385"
        if v87.v183():
            print(v87.v305().v359())
        else:
            print(v189"\033[31m目录文件 {v87} 未找到。请先安装或运行 v355。\033[0m")
    else: 
        if v22.v183() and v6.v183() and v44.v183() and v440.v183():
            print("\033[33m检测到zmkSB可能已安装并正在运行。\033[0m")
            if v125():
                 print("\033[32m如需重新安装，请先执行卸载: v298 " + os.v278.v104(__file__) + " del\033[0m")
            else:
                print("\033[31m服务状态异常，建议尝试重新安装。\033[0m")
                v219(v94) 
        else:
            print("\033[33m未检测到完整安装，开始执行安装流程...\033[0m")
            v219(v94)
if __name__ == "__main__":
    v333 = os.v278.v104(__file__)
    if len(sys.v95) == 1: 
        if v22.v183() and v6.v183() and v44.v183() and v440.v183():
            print(v189"\033[33m检测到 v439 可能已安装。显示当前状态。\033[0m")
            print(v189"\033[33m如需重新安装，请运行: v298 {v333} v219\033[0m")
            print(v189"\033[33m如需卸载，请运行: v298 {v333} del\033[0m")
            v125()
        else:
            print(v189"\033[33m未检测到安装或运行中的服务，将引导进行安装。\033[0m")
            print(v189"\033[33m你可以通过 'v298 {v333} --v206' 查看所有选项。\033[0m")
            v94 = v276() 
            v219(v94) 
    else:
        v250()
